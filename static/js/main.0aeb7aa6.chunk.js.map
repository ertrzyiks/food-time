{"version":3,"sources":["ShowError.js","time.js","queries/getEntries.js","List.js","useInterval.js","SpaceSelector.js","utils.js","EntryPage.js","NotFound.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","error","backgroundColor","palette","dark","ShowError","_ref","message","_useState","useState","_useState2","Object","slicedToArray","open","setOpen","classes","handleClose","event","reason","react_default","a","createElement","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","SnackbarContent","className","formatTime","timestamp","format","Date","formatElapsedTime","ms","min","concat","Math","round","GET_ENTIRES","gql","_templateObject","Counter","text","last","count","setCount","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","now","CREATE_ENTRY","List_templateObject","A_DAY","EntryList","_ref2","spaceId","_useQuery","useQuery","variables","loading","data","hasData","_useMutation","useMutation","refetchQueries","createEntry","entries","reverse","reduce","acc","entry","length","toConsumableArray","objectSpread","meantime","time","groupedEntries","day","startOfDay","getTime","push","Fragment","src_ShowError","toString","Typography","variant","component","Button","size","color","onClick","Container","maxWidth","Paper","List","react_transition_group","transitionName","transitionEnterTimeout","transitionLeaveTimeout","map","_ref3","_ref4","group","key","ListSubheader","parseInt","_ref5","ListItem","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","aria-label","Link","to","Edit_default","secondary","CircularProgress","SpaceSelector","onSelect","value","setValue","onSubmit","Grid","container","spacing","direction","item","TextField","label","onChange","target","margin","type","debounce","fn","nextTask","pending","_len","arguments","args","Array","_key","apply","execute","then","toCall","GET_ENTRY","EntryPage_templateObject","UPDATE_ENTRY_TIME","_templateObject2","REMOVE_ENTRY","_templateObject3","createStyles","root","padding","EntryPage","match","params","update","store","removeEntry","listData","readQuery","query","e","writeQuery","filter","removedId","_useMutation2","mutationData","date","setDate","client","useApolloClient","updateEntry","useCallback","mutate","mutation","updateDate","react_router","justify","xs","md","paragraph","Fab","addDays","Add_default","subDays","Remove_default","addHours","subHours","addMinutes","subMinutes","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","max","NotFound","RouterLink","App","storage","read","write","setSpaceId","react_router_dom","exact","path","render","src_List","props","src_EntryPage","assign","src_SpaceSelector","selectedSpaceId","Boolean","window","location","hostname","ApolloClient","cache","InMemoryCache","cacheRedirects","Query","_","getCacheKey","__typename","link","createHttpLink","uri","process","ReactDOM","ApolloContext","src_App","JSON","parse","localStorage","getItem","setItem","stringify","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0aeb7aa6.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { Snackbar as MuiSnackbar, SnackbarContent as MuiSnackbarContent } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => ({\n  error: {\n    backgroundColor: theme.palette.error.dark\n  }\n}));\n\nconst ShowError = ({message}) => {\n  const [open, setOpen] = useState(true)\n  const classes = useStyles()\n\n  if (!message) {\n    return null\n  }\n\n  function handleClose(event, reason) {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false)\n  }\n\n  return (\n    <MuiSnackbar\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'left',\n      }}\n      autoHideDuration={6000}\n      onClose={handleClose}\n      open={open}\n    >\n      <MuiSnackbarContent className={classes.error} message={message} onClose={handleClose} />\n    </MuiSnackbar>\n  )\n}\n\nexport default ShowError\n","import format from 'date-fns/format'\n\nexport function formatTime (timestamp) {\n  return format(new Date(timestamp), 'HH:mm')\n}\n\nexport function formatDay(timestamp) {\n  return format(new Date(timestamp), 'd MMM, yyyy')\n}\n\nexport function formatElapsedTime(ms) {\n  const s = ms / 1000\n\n  const min = s / 60\n  if (min < 1) {\n    return '< 1min'\n  }\n\n  if (min < 60) {\n    return `~ 1h`\n  }\n\n  return `~ ${Math.round(min / 60)}h`\n}\n","import gql from \"graphql-tag\";\n\nexport const GET_ENTIRES = gql`\n  query getEntries($spaceId: String!) {\n    entries(spaceId: $spaceId) {\n      id\n      time\n    }\n  }\n`\n","import React, { useState } from 'react';\nimport gql from 'graphql-tag'\nimport { useQuery, useMutation } from 'react-apollo-hooks'\nimport { Link } from 'react-router-dom'\n\nimport Button from '@material-ui/core/Button'\n\nimport Typography from '@material-ui/core/Typography'\n\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction'\nimport ListSubheader from '@material-ui/core/ListSubheader'\nimport IconButton from '@material-ui/core/IconButton'\nimport Edit from '@material-ui/icons/Edit'\nimport Paper from '@material-ui/core/Paper'\nimport Container from '@material-ui/core/Container'\nimport { CircularProgress } from '@material-ui/core'\nimport { CSSTransitionGroup } from 'react-transition-group'\nimport { useInterval } from './useInterval'\nimport './App.css'\nimport ShowError from './ShowError'\n\nimport startOfDay from 'date-fns/startOfDay'\nimport format from 'date-fns/format'\n\nimport { formatTime, formatElapsedTime } from './time'\n\nimport { GET_ENTIRES } from './queries'\n\nfunction Counter({text, last}) {\n  let [count, setCount] = useState(0);\n\n  useInterval(() => {\n    setCount(count + 1);\n  }, 30 * 1000);\n\n  if (!last) {\n    return null\n  }\n\n  return <span>{text}: {formatElapsedTime(Date.now() - last.now)}</span>;\n}\n\nconst CREATE_ENTRY = gql`\n  mutation CreateEntry($spaceId: String!, $time: Int!) {\n    createEntry(spaceId: $spaceId, time: $time) {\n      id\n    }\n  }\n`\n\nconst A_DAY = 24 * 60 * 60 * 1000\n\nfunction EntryList({spaceId}) {\n  const { loading, data, error } = useQuery(GET_ENTIRES, {variables: {spaceId}})\n  const hasData = !loading && !error\n\n  const [createEntry] = useMutation(CREATE_ENTRY, {\n    refetchQueries: ['getEntries']\n  })\n\n  const entries = hasData && data.entries.reverse().reduce((acc, entry) => {\n    if (acc.length > 0) {\n      const last = acc[acc.length - 1]\n\n      return [...acc, {...entry, meantime: entry.time - last.time}]\n    } else {\n      return [{...entry, meantime: null}]\n    }\n  }, []).reverse()\n\n  const groupedEntries = entries && entries.reduce((acc, entry) => {\n    const day = startOfDay(new Date(entry.time * 1000)).getTime()\n    acc[day] = acc[day] || []\n    acc[day].push(entry)\n    return acc\n  }, {})\n\n  const onAddEntry = () => createEntry({ variables: { time: Math.round(Date.now() / 1000), spaceId}})\n\n  const now = Date.now()\n\n  return (\n    <>\n      <header className=\"App-header\">\n        { error && <ShowError message={error.toString()} /> }\n\n        { !loading &&\n        <Typography variant=\"h5\" component=\"p\">\n          <Counter text='Since last event' last={0}/>\n        </Typography>\n        }\n\n        <Button variant=\"contained\" size='large' color=\"primary\" onClick={onAddEntry}>\n          Now\n        </Button>\n      </header>\n\n      <Container maxWidth=\"sm\">\n        {!loading && !error &&\n        <Paper>\n          { !loading && data && data.entries.length > 0 &&\n          <List>\n            <CSSTransitionGroup\n              transitionName=\"example\"\n              transitionEnterTimeout={500}\n              transitionLeaveTimeout={300}>\n            {\n              Object.entries(groupedEntries).map(([timestamp, group]) => (\n                <div key={timestamp}>\n                  <ListSubheader>\n                    {format(parseInt(timestamp, 10), 'd MMM, yyyy')}\n                  </ListSubheader>\n\n                  <CSSTransitionGroup\n                    transitionName=\"example\"\n                    transitionEnterTimeout={500}\n                    transitionLeaveTimeout={300}>\n                   {group.map(({time, id, meantime}) =>\n                     <React.Fragment key={id}>\n                       <ListItem>\n                         <ListItemText primary={formatTime(time * 1000)} />\n                          {\n                            (now - time * 1000 < A_DAY) &&\n                            <ListItemSecondaryAction>\n                              <IconButton edge=\"end\" aria-label=\"Comments\" component={Link} to={`/edit/${id}`}>\n                                <Edit/>\n                              </IconButton>\n                            </ListItemSecondaryAction>\n                          }\n                        </ListItem>\n                       { meantime &&\n                         <ListItem>\n                           <ListItemText secondary={formatElapsedTime(meantime * 1000)} />\n                         </ListItem>\n                       }\n                     </React.Fragment>\n                    )}\n                  </CSSTransitionGroup>\n                </div>\n              ))\n            }\n            </CSSTransitionGroup>\n          </List>\n          }\n\n          { !loading && data && data.entries.length === 0 &&\n          <List>\n            <ListItem>\n              <ListItemText primary='Click the button to start measuring intervals' />\n            </ListItem>\n          </List>\n          }\n\n        </Paper>\n        }\n\n        { loading && <CircularProgress /> }\n      </Container>\n    </>\n  )\n}\n\nexport default EntryList;\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React, { useState } from 'react'\n\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\n\nfunction SpaceSelector({onSelect}) {\n  const [value, setValue] = useState('')\n\n  return (\n    <>\n      <header className=\"App-header\">\n      </header>\n\n      <form onSubmit={() => onSelect(value)}>\n        <Grid container spacing={5} direction=\"column\">\n          <Grid item>\n            <TextField\n              label=\"Space name\"\n              value={value}\n              onChange={event => setValue(event.target.value)}\n              margin=\"normal\"\n            />\n          </Grid>\n\n          <Grid item>\n            <Button type='submit' variant=\"contained\" color=\"primary\" >\n              Proceed\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n\n  )\n}\n\nexport default SpaceSelector\n","\nexport function debounce(fn) {\n  let nextTask = null\n  let pending = false\n\n  function execute(fn) {\n    pending = true\n    fn().then(() => {\n      pending = false\n      if (nextTask != null) {\n        const toCall = nextTask\n        nextTask = null\n        execute(toCall)\n      }\n    })\n  }\n\n  return (...args) => {\n    if (pending) {\n      nextTask = () => fn(...args)\n    } else {\n      execute(() => fn(...args))\n    }\n  }\n}\n","import React, { useState, useCallback } from 'react'\nimport gql from 'graphql-tag'\nimport subMinutes from 'date-fns/subMinutes'\nimport addMinutes from 'date-fns/addMinutes'\nimport subHours from 'date-fns/subHours'\nimport addHours from 'date-fns/addHours'\nimport addDays from 'date-fns/addDays'\nimport subDays from 'date-fns/subDays'\n\nimport { Redirect } from 'react-router-dom'\n\nimport { Button, Container, Fab, Paper, CircularProgress, Typography, Grid, Slider } from '@material-ui/core'\nimport { useQuery, useMutation, useApolloClient } from 'react-apollo-hooks'\nimport AddIcon from '@material-ui/icons/Add'\nimport RemoveIcon from '@material-ui/icons/Remove'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport { formatTime, formatDay } from './time'\nimport { debounce } from './utils'\n\nimport { GET_ENTIRES } from './queries'\n\nconst GET_ENTRY = gql`\n  query getEntry($id: String!) {\n    entry(id: $id) {\n      id\n      time\n    }\n  }\n`\n\nconst UPDATE_ENTRY_TIME = gql`\n  mutation UpdateEntry($id: String!, $time: Int!) {\n    updateEntry(id: $id, time: $time) {\n      id\n      time\n    }\n  }\n`\n\nconst REMOVE_ENTRY = gql`\n  mutation RemoveEntry($id: String!) {\n    removeEntry(id: $id) {\n      message\n      removedId\n    }\n  }\n`\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(3, 5),\n    },\n  }),\n)\n\nfunction EntryPage({spaceId, match}) {\n  const { id } = match.params\n\n  const { loading, data } = useQuery(GET_ENTRY, {variables: {id}})\n  const [removeEntry, {data: mutationData}] = useMutation(REMOVE_ENTRY, {\n    variables: {id},\n    update: (store, { data: {removeEntry} }) => {\n      let listData = null\n\n      try {\n        listData = store.readQuery({query: GET_ENTIRES, variables: {spaceId}})\n      } catch (e) {\n        // Reading error, do nothing\n      }\n\n      if (!listData) {\n        return\n      }\n\n      store.writeQuery({\n        query: GET_ENTIRES, variables: {spaceId}, data: {\n          entries: listData.entries.filter(entry => {\n            return entry.id !== removeEntry.removedId\n          })\n        }\n      })\n    },\n  })\n\n  const [date, setDate] = useState(null)\n\n  const client = useApolloClient()\n\n  const updateEntry = useCallback(debounce(variables => {\n    return client.mutate({\n      mutation: UPDATE_ENTRY_TIME,\n      variables: {\n        id,\n        ...variables\n      }\n    })\n  }), [spaceId, id])\n\n  if (date === null && !loading) {\n    setDate(new Date(data.entry.time * 1000))\n  }\n\n  const updateDate = (date) => {\n    setDate(date)\n    updateEntry({\n      time: Math.round(date.getTime() / 1000)\n    })\n  }\n\n  const classes = useStyles()\n\n  if (mutationData) {\n    return <Redirect to='/'/>\n  }\n\n  return (\n    <>\n      <header className=\"App-header\">\n        { !loading &&\n          <Typography>\n            {formatTime(date)} {formatDay(date)}\n          </Typography>\n        }\n      </header>\n\n      <Container maxWidth=\"sm\">\n        {\n          loading\n            ? <CircularProgress/>\n            : <Grid container spacing={2} direction='row' justify='center'>\n              <Grid item xs={12} md={4}>\n                <Paper className={classes.root}>\n                  <Typography paragraph>\n                    Day\n                  </Typography>\n\n                  <Fab color=\"primary\" aria-label=\"Add\" size='small' onClick={() => updateDate(addDays(date, 1))}>\n                    <AddIcon />\n                  </Fab>\n                  <Fab color=\"primary\" aria-label=\"Remove\" size='small' onClick={() => updateDate(subDays(date, 1))}>\n                    <RemoveIcon />\n                  </Fab>\n                </Paper>\n              </Grid>\n\n              <Grid item xs={12} md={4}>\n                <Paper className={classes.root}>\n                  <Typography paragraph>\n                    Hours\n                  </Typography>\n\n                  <Fab color=\"primary\" aria-label=\"Add\" size='small' onClick={() => updateDate(addHours(date, 1))}>\n                    <AddIcon />\n                  </Fab>\n\n                  <Fab color=\"primary\" aria-label=\"Remove\" size='small' onClick={() => updateDate(subHours(date, 1))}>\n                    <RemoveIcon />\n                  </Fab>\n                </Paper>\n              </Grid>\n\n              <Grid item xs={12} md={4}>\n                <Paper className={classes.root}>\n                  <Typography paragraph>\n                    Minutes\n                  </Typography>\n\n                  <Fab color=\"primary\" aria-label=\"Add\" size='small' onClick={() => updateDate(addMinutes(date, 5))}>\n                    <AddIcon />\n                  </Fab>\n\n                  <Fab color=\"primary\" aria-label=\"Remove\" size='small' onClick={() => updateDate(subMinutes(date, 5))}>\n                    <RemoveIcon />\n                  </Fab>\n                </Paper>\n              </Grid>\n\n              <Grid item xs={12} md={12}>\n                <Paper className={classes.root}>\n                  <Typography paragraph>\n                    Extra food\n                  </Typography>\n\n                  <Slider\n                    defaultValue={30}\n                    aria-labelledby=\"discrete-slider\"\n                    valueLabelDisplay=\"auto\"\n                    step={10}\n                    min={10}\n                    max={110}\n                  />\n                </Paper>\n              </Grid>\n\n              <Grid item xs={12} md={12}>\n                <Paper className={classes.root}>\n                  <Typography paragraph>\n                    Danger zone\n                  </Typography>\n\n                  <Button variant=\"contained\" color='secondary' onClick={removeEntry}>Delete</Button>\n                </Paper>\n              </Grid>\n            </Grid>\n        }\n\n      </Container>\n    </>\n  )\n}\n\nexport default EntryPage\n","import React from 'react'\n\nimport { Container, Typography, Link } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport { Link as RouterLink } from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(5, 2),\n    },\n  }),\n)\n\nconst NotFound = () => {\n  const classes = useStyles()\n\n  return (\n    <>\n      <header className=\"App-header\">\n        ERROR 404\n      </header>\n\n      <Container className={classes.root} maxWidth=\"sm\">\n        <Typography variant='h5' paragraph>\n          NOT FOUND\n        </Typography>\n\n        <Typography variant='body'>\n          Go back to the <Link to='/' component={RouterLink}>homepage</Link>\n        </Typography>\n      </Container>\n    </>\n  )\n}\n\nexport default NotFound\n","import React, { useEffect, useState } from 'react';\nimport EntryList from './List'\nimport SpaceSelector from './SpaceSelector'\nimport EntryPage from './EntryPage'\nimport NotFound from './NotFound'\nimport './App.css'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\n\nfunction App({storage}) {\n  const storageKey = 'food-time-space-id'\n  const { read, write } = storage\n\n  const [spaceId, setSpaceId] = useState(read(storageKey))\n\n  useEffect(() => {\n    write(storageKey, spaceId)\n  }, [spaceId, write])\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          {\n            spaceId ?\n            <>\n              <Route exact path=\"/\" render={() => <EntryList spaceId={spaceId} />} />\n              <Route path=\"/edit/:id\" render={props => <EntryPage {...props} spaceId={spaceId}/>} />\n            </> :\n            <Route exact path=\"/\" render={props => <SpaceSelector {...props} onSelect={selectedSpaceId => setSpaceId(selectedSpaceId)}/>} />\n          }\n          <Route component={NotFound} />\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\n\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloProvider } from 'react-apollo-hooks'\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache({\n    cacheRedirects: {\n      Query: {\n        entry: (_, args, { getCacheKey }) => getCacheKey({__typename: 'Entry', id: args.id})\n      },\n    },\n  }),\n  link: createHttpLink({uri: process.env.REACT_APP_GRAPHQL_ENDPOINT || 'http://localhost:8080/food-time'})\n})\n\nconst read = (key) => JSON.parse(window.localStorage.getItem(key))\nconst write = (key, value) => window.localStorage.setItem(key, JSON.stringify(value))\n\nReactDOM.render(\n  (\n    <ApolloProvider client={client}>\n      <App storage={{read, write}}/>\n    </ApolloProvider>\n  ),\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}