{"version":3,"sources":["App.js","useInterval.js","serviceWorker.js","index.js"],"names":["reducer","state","action","type","now","Date","elapsedTime","length","id","concat","Object","toConsumableArray","slice","filter","_ref","Error","Counter","_ref2","text","last","_useState","useState","_useState2","slicedToArray","count","setCount","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","react_default","a","createElement","ms","min","Math","round","formatElapsedTime","App","_ref3","initialState","_useReducer","useReducer","_useReducer2","dispatch","_useState3","_useState4","toDelete","setToDelete","window","localStorage","setItem","JSON","stringify","className","Typography","variant","component","Button","size","color","onClick","Container","maxWidth","Paper","List","lib","map","_ref4","timestamp","ListItem","key","ListItemText","primary","format","ListItemSecondaryAction","IconButton","edge","aria-label","Delete_default","Dialog","open","Boolean","onClose","DialogTitle","DialogActions","autoFocus","location","hostname","match","ReactDOM","render","src_App","Array","from","parse","getItem","e","getInitialState","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3bf1069a.chunk.js","sourcesContent":["import React, { useReducer, useEffect, useState } from 'react';\nimport Button from '@material-ui/core/Button';\n\nimport Typography from '@material-ui/core/Typography';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\nimport Delete from '@material-ui/icons/Delete';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport { AnimateGroup } from 'react-animate-mount'\nimport format from 'date-fns/format'\nimport { useInterval } from './useInterval'\nimport './App.css';\n\nfunction formatTime (timestamp) {\n  return format(new Date(timestamp), 'HH:mm')\n}\n\nfunction formatElapsedTime(ms) {\n  const s = ms / 1000\n\n  const min = s / 60\n  if (min < 1) {\n    return '< 1min'\n  }\n\n  return `${Math.round(min)} min`\n}\n\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'tick':\n      const now = Date.now()\n      const elapsedTime = state.length > 0 ? now - state[0].now : null\n      const id = state.length > 0 ? state[0].id + 1 : 1\n      return [{id, elapsedTime, now}, ...state].slice(0, 20)\n    case 'delete':\n      return state.filter(({id}) => id !== action.id)\n    default:\n      throw new Error()\n  }\n}\n\nfunction Counter({text, last}) {\n  let [count, setCount] = useState(0);\n\n  useInterval(() => {\n    setCount(count + 1);\n  }, 30 * 1000);\n\n  if (!last) {\n    return null\n  }\n\n  return <span>{text}: {formatElapsedTime(Date.now() - last.now)}</span>;\n}\n\nfunction App({initialState}) {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const [toDelete, setToDelete] = useState(null)\n\n  useEffect(\n    () => {\n      window.localStorage.setItem('items-food-time', JSON.stringify(state));\n    },\n    [state]\n  )\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n        <Typography variant=\"h5\" component=\"p\">\n          <Counter text='Since last event' last={state[0]}/>\n        </Typography>\n\n        <Button variant=\"contained\" size='large' color=\"primary\" onClick={() => dispatch({type: 'tick'})}>\n          Now\n        </Button>\n      </header>\n\n      <Container maxWidth=\"sm\">\n        <Paper>\n          { state.length > 0 &&\n          <List>\n            <AnimateGroup>\n              {state.map(({now, elapsedTime, id}) =>\n                <ListItem key={id}>\n                  <ListItemText primary={formatTime(now)} />\n\n                  { elapsedTime && elapsedTime < 60 * 60 * 1000 &&\n                  <ListItemSecondaryAction>\n                    <IconButton edge=\"end\" aria-label=\"Comments\" onClick={() => setToDelete(id)}>\n                      <Delete/>\n                    </IconButton>\n                  </ListItemSecondaryAction>\n                  }\n                </ListItem>\n              )}\n            </AnimateGroup>\n          </List>\n          }\n\n          { state.length === 0 &&\n          <List>\n            <ListItem>\n              <ListItemText primary='Click the button to start measuring intervals' />\n            </ListItem>\n          </List>\n          }\n        </Paper>\n      </Container>\n\n      <Dialog\n        open={Boolean(toDelete)}\n        onClose={() => setToDelete(null)}\n      >\n        <DialogTitle id=\"alert-dialog-title\">Are you sure to remove this item?</DialogTitle>\n        <DialogActions>\n          <Button onClick={() => { dispatch({type: 'delete', id: toDelete}); setToDelete(null) } } color=\"secondary\" autoFocus>\n            Delete\n          </Button>\n          <Button onClick={() => setToDelete(null)} color=\"primary\">\n            Keep it\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction getInitialState() {\n  try {\n    return Array.from(JSON.parse(window.localStorage.getItem('items-food-time')))\n  } catch (e) {\n    return []\n  }\n}\n\nReactDOM.render(<App initialState={getInitialState()}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}