{"version":3,"sources":["time.js","List.js","useInterval.js","SpaceSelector.js","utils.js","EntryPage.js","NotFound.js","App.js","serviceWorker.js","index.js"],"names":["formatTime","timestamp","format","Date","Counter","_ref","text","last","_useState","useState","_useState2","Object","slicedToArray","count","setCount","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","react_default","a","createElement","ms","min","concat","Math","round","formatElapsedTime","now","GET_ENTIRES","gql","_templateObject","CREATE_ENTRY","_templateObject2","EntryList","_ref2","spaceId","_useQuery","useQuery","variables","loading","data","_useMutation","useMutation","time","refetchQueries","createEntry","Fragment","className","Typography","variant","component","Button","size","color","onClick","Container","maxWidth","Paper","entries","length","List","lib","map","_ref3","elapsedTime","ListItem","key","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","aria-label","Link","to","Edit_default","Delete_default","SpaceSelector","onSelect","value","setValue","onSubmit","Grid","container","spacing","direction","item","TextField","label","onChange","event","target","margin","debounce","fn","nextTask","pending","_len","arguments","args","Array","_key","apply","execute","then","toCall","GET_ENTRY","EntryPage_templateObject","UPDATE_ENTRY_TIME","EntryPage_templateObject2","useStyles","makeStyles","theme","createStyles","root","padding","EntryPage","match","params","date","setDate","client","useApolloClient","updateEntry","useCallback","mutate","mutation","objectSpread","entry","updateDate","getTime","classes","CircularProgress","justify","xs","md","paragraph","Fab","addDays","Add_default","subDays","Remove_default","addHours","subHours","addMinutes","subMinutes","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","max","NotFound","RouterLink","App","storage","read","write","setSpaceId","react_router_dom","react_router","exact","path","render","src_List","props","src_EntryPage","assign","src_SpaceSelector","selectedSpaceId","Boolean","window","location","hostname","ApolloClient","cache","InMemoryCache","cacheRedirects","Query","_","getCacheKey","__typename","link","createHttpLink","uri","process","ReactDOM","ApolloContext","src_App","JSON","parse","localStorage","getItem","setItem","stringify","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7d23c55e.chunk.js","sourcesContent":["import format from 'date-fns/format'\n\nexport function formatTime (timestamp) {\n  return format(new Date(timestamp), 'HH:mm')\n}\n\nexport function formatDay(timestamp) {\n  return format(new Date(timestamp), 'd MMM, yyyy')\n}\n\nexport function formatElapsedTime(ms) {\n  const s = ms / 1000\n\n  const min = s / 60\n  if (min < 1) {\n    return '< 1min'\n  }\n\n  return `${Math.round(min)} min`\n}\n","import React, { useState } from 'react';\nimport gql from 'graphql-tag'\nimport { useQuery, useMutation } from 'react-apollo-hooks'\nimport { Link } from 'react-router-dom'\n\nimport Button from '@material-ui/core/Button';\n\nimport Typography from '@material-ui/core/Typography';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport IconButton from '@material-ui/core/IconButton';\nimport Delete from '@material-ui/icons/Delete';\nimport Edit from '@material-ui/icons/Edit';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport { AnimateGroup } from 'react-animate-mount'\nimport { useInterval } from './useInterval'\nimport './App.css';\n\nimport { formatTime, formatElapsedTime } from './time'\n\nfunction Counter({text, last}) {\n  let [count, setCount] = useState(0);\n\n  useInterval(() => {\n    setCount(count + 1);\n  }, 30 * 1000);\n\n  if (!last) {\n    return null\n  }\n\n  return <span>{text}: {formatElapsedTime(Date.now() - last.now)}</span>;\n}\n\nconst GET_ENTIRES = gql`\n  query getEntries($spaceId: String!) {\n    entries(spaceId: $spaceId) {\n      id\n      time\n    }\n  }\n`\n\nconst CREATE_ENTRY = gql`\n  mutation CreateEntry($spaceId: String!, $time: Int!) {\n    createEntry(spaceId: $spaceId, time: $time) {\n      id\n    }\n  }\n`\n\nfunction EntryList({spaceId}) {\n  const { loading, data } = useQuery(GET_ENTIRES, {variables: {spaceId}})\n\n  const [createEntry] = useMutation(CREATE_ENTRY, {\n    variables: { time: Math.round(Date.now() / 1000), spaceId},\n    refetchQueries: ['getEntries']\n  })\n\n  return (\n    <>\n      <header className=\"App-header\">\n\n        { !loading &&\n        <Typography variant=\"h5\" component=\"p\">\n          <Counter text='Since last event' last={0}/>\n        </Typography>\n        }\n\n        <Button variant=\"contained\" size='large' color=\"primary\" onClick={() => createEntry()}>\n          Now\n        </Button>\n      </header>\n\n      <Container maxWidth=\"sm\">\n        <Paper>\n          { !loading && data && data.entries.length > 0 &&\n          <List>\n            <AnimateGroup>\n              {data.entries.map(({time, elapsedTime, id}) =>\n                <ListItem key={id}>\n                  <ListItemText primary={formatTime(time * 1000)} />\n\n                  <ListItemSecondaryAction>\n                    <IconButton edge=\"end\" aria-label=\"Comments\" component={Link} to={`/edit/${id}`}>\n                      <Edit/>\n                    </IconButton>\n\n                    {elapsedTime && elapsedTime < 60 * 60 * 1000 &&\n                    <IconButton edge=\"end\" aria-label=\"Comments\" onClick={() => {}}>\n                      <Delete/>\n                    </IconButton>\n                    }\n                  </ListItemSecondaryAction>\n                </ListItem>\n              )}\n            </AnimateGroup>\n          </List>\n          }\n\n          { !loading && data && data.entries.length === 0 &&\n          <List>\n            <ListItem>\n              <ListItemText primary='Click the button to start measuring intervals' />\n            </ListItem>\n          </List>\n          }\n        </Paper>\n      </Container>\n    </>\n  )\n}\n\nexport default EntryList;\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React, { useState } from 'react'\n\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport Grid from '@material-ui/core/Grid'\n\nfunction SpaceSelector({onSelect}) {\n  const [value, setValue] = useState('')\n\n  return (\n    <>\n      <header className=\"App-header\">\n      </header>\n\n      <form onSubmit={() => onSelect(value)}>\n        <Grid container spacing={5} direction=\"column\">\n          <Grid item>\n            <TextField\n              label=\"Space name\"\n              value={value}\n              onChange={event => setValue(event.target.value)}\n              margin=\"normal\"\n            />\n          </Grid>\n\n          <Grid item>\n            <Button variant=\"contained\" color=\"primary\" >\n              Proceed\n            </Button>\n          </Grid>\n        </Grid>\n      </form>\n    </>\n\n  )\n}\n\nexport default SpaceSelector\n","\nexport function debounce(fn) {\n  let nextTask = null\n  let pending = false\n\n  function execute(fn) {\n    pending = true\n    fn().then(() => {\n      pending = false\n      if (nextTask != null) {\n        const toCall = nextTask\n        nextTask = null\n        execute(toCall)\n      }\n    })\n  }\n\n  return (...args) => {\n    if (pending) {\n      nextTask = () => fn(...args)\n    } else {\n      execute(() => fn(...args))\n    }\n  }\n}\n","import React, { useState, useCallback } from 'react'\nimport gql from 'graphql-tag'\nimport subMinutes from 'date-fns/subMinutes'\nimport addMinutes from 'date-fns/addMinutes'\nimport subHours from 'date-fns/subHours'\nimport addHours from 'date-fns/addHours'\nimport addDays from 'date-fns/addDays'\nimport subDays from 'date-fns/subDays'\n\nimport { Container, Fab, Paper, CircularProgress, Typography, Grid, Slider } from '@material-ui/core'\nimport { useQuery, useApolloClient } from 'react-apollo-hooks'\nimport AddIcon from '@material-ui/icons/Add'\nimport RemoveIcon from '@material-ui/icons/Remove'\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport { formatTime, formatDay } from './time'\nimport { debounce } from './utils'\n\n\nconst GET_ENTRY = gql`\n  query getEntry($spaceId: String!, $id: String!) {\n    entry(spaceId: $spaceId, id: $id) {\n      id\n      time\n    }\n  }\n`\n\nconst UPDATE_ENTRY_TIME = gql`\n  mutation UpdateEntry($spaceId: String!, $id: String!, $time: Int!) {\n    updateEntry(spaceId: $spaceId, id: $id, time: $time) {\n      id\n      time\n    }\n  }\n`\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(3, 5),\n    },\n  }),\n)\n\nfunction EntryPage({spaceId, match}) {\n  const { id } = match.params\n\n  const { loading, data } = useQuery(GET_ENTRY, {variables: {spaceId, id}})\n\n  const [date, setDate] = useState(null)\n\n  const client = useApolloClient()\n\n  const updateEntry = useCallback(debounce(variables => {\n    return client.mutate({\n      mutation: UPDATE_ENTRY_TIME,\n      variables: {\n        spaceId,\n        id,\n        ...variables\n      }\n    })\n  }), [spaceId, id])\n\n  if (date === null && !loading) {\n    setDate(new Date(data.entry.time * 1000))\n  }\n\n  const updateDate = (date) => {\n    setDate(date)\n    updateEntry({\n      time: Math.round(date.getTime() / 1000)\n    })\n  }\n\n  const classes = useStyles()\n\n  return (\n    <>\n      <header className=\"App-header\">\n        { !loading &&\n          <Typography>\n            {formatTime(date)} {formatDay(date)}\n          </Typography>\n        }\n      </header>\n\n      <Container maxWidth=\"sm\">\n        {\n          loading\n            ? <CircularProgress/>\n            : <Grid container spacing={2} direction='row' justify='center'>\n              <Grid item xs={12} md={4}>\n                <Paper className={classes.root}>\n                  <Typography paragraph>\n                    Day\n                  </Typography>\n\n                  <Fab color=\"primary\" aria-label=\"Add\" size='small' onClick={() => updateDate(addDays(date, 1))}>\n                    <AddIcon />\n                  </Fab>\n                  <Fab color=\"primary\" aria-label=\"Remove\" size='small' onClick={() => updateDate(subDays(date, 1))}>\n                    <RemoveIcon />\n                  </Fab>\n                </Paper>\n              </Grid>\n\n              <Grid item xs={12} md={4}>\n                <Paper className={classes.root}>\n                  <Typography paragraph>\n                    Hours\n                  </Typography>\n\n                  <Fab color=\"primary\" aria-label=\"Add\" size='small' onClick={() => updateDate(addHours(date, 1))}>\n                    <AddIcon />\n                  </Fab>\n\n                  <Fab color=\"primary\" aria-label=\"Remove\" size='small' onClick={() => updateDate(subHours(date, 1))}>\n                    <RemoveIcon />\n                  </Fab>\n                </Paper>\n              </Grid>\n\n              <Grid item xs={12} md={4}>\n                <Paper className={classes.root}>\n                  <Typography paragraph>\n                    Minutes\n                  </Typography>\n\n                  <Fab color=\"primary\" aria-label=\"Add\" size='small' onClick={() => updateDate(addMinutes(date, 5))}>\n                    <AddIcon />\n                  </Fab>\n\n                  <Fab color=\"primary\" aria-label=\"Remove\" size='small' onClick={() => updateDate(subMinutes(date, 5))}>\n                    <RemoveIcon />\n                  </Fab>\n                </Paper>\n              </Grid>\n\n              <Grid item xs={12} md={12}>\n                <Paper className={classes.root}>\n                  <Typography paragraph>\n                    Extra food\n                  </Typography>\n\n                  <Slider\n                    defaultValue={30}\n                    aria-labelledby=\"discrete-slider\"\n                    valueLabelDisplay=\"auto\"\n                    step={10}\n                    min={10}\n                    max={110}\n                  />\n                </Paper>\n              </Grid>\n            </Grid>\n        }\n\n      </Container>\n    </>\n  )\n}\n\nexport default EntryPage\n","import React from 'react'\n\nimport { Container, Typography, Link } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles'\nimport { Link as RouterLink } from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(5, 2),\n    },\n  }),\n)\n\nconst NotFound = () => {\n  const classes = useStyles()\n\n  return (\n    <>\n      <header className=\"App-header\">\n        ERROR 404\n      </header>\n\n      <Container className={classes.root} maxWidth=\"sm\">\n        <Typography variant='h5' paragraph>\n          NOT FOUND\n        </Typography>\n\n        <Typography variant='body'>\n          Go back to the <Link to='/' component={RouterLink}>homepage</Link>\n        </Typography>\n      </Container>\n    </>\n  )\n}\n\nexport default NotFound\n","import React, { useEffect, useState } from 'react';\nimport EntryList from './List'\nimport SpaceSelector from './SpaceSelector'\nimport EntryPage from './EntryPage'\nimport NotFound from './NotFound'\nimport './App.css'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\n\nfunction App({storage}) {\n  const storageKey = 'food-time-space-id'\n  const { read, write } = storage\n\n  const [spaceId, setSpaceId] = useState(read(storageKey))\n\n  useEffect(() => {\n    write(storageKey, spaceId)\n  }, [spaceId, write])\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <Switch>\n          {\n            spaceId ?\n            <>\n              <Route exact path=\"/\" render={() => <EntryList spaceId={spaceId} />} />\n              <Route path=\"/edit/:id\" render={props => <EntryPage {...props} spaceId={spaceId}/>} />\n            </> :\n            <Route exact path=\"/\" render={props => <SpaceSelector {...props} onSelect={selectedSpaceId => setSpaceId(selectedSpaceId)}/>} />\n          }\n          <Route component={NotFound} />\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\n\nimport { ApolloClient } from 'apollo-client'\nimport { createHttpLink } from \"apollo-link-http\"\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport { ApolloProvider } from 'react-apollo-hooks'\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache({\n    cacheRedirects: {\n      Query: {\n        entry: (_, args, { getCacheKey }) => getCacheKey({__typename: 'Entry', id: args.id})\n      },\n    },\n  }),\n  link: createHttpLink({uri: process.env.REACT_APP_GRAPHQL_ENDPOINT || 'http://localhost:8080/food-time'})\n})\n\nconst read = (key) => JSON.parse(window.localStorage.getItem(key))\nconst write = (key, value) => window.localStorage.setItem(key, JSON.stringify(value))\n\nReactDOM.render(\n  (\n    <ApolloProvider client={client}>\n      <App storage={{read, write}}/>\n    </ApolloProvider>\n  ),\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}